for (i in 1:nrow(my_data)) {
if (my_data[i, 3] < 0.05 & (my_data$logFC[i] > log2(1.5) | my_data$logFC[i] < -log2(1.5))) {
new_gens[i, 2] <- my_data$logFC[i]
}
else {
new_gens[i, 2] <- 0
}
}
source('~/TranscInterTF/R/make_deg.R')
df_1h_subset <- make_deg(rnaseq_1h[match(tf_from_dapseq[, 1], rnaseq_1h[, 1]), ], yname = 'RNAseq_logFC_1h')
df_1h_subset <- make_deg(rnaseq_1h[match(tf_from_dapseq[, 1], rnaseq_1h[, 1]), ], colname = 'RNAseq_logFC_1h')
df_6h_subset <- make_deg(rnaseq_6h[match(tf_from_dapseq[, 1], rnaseq_6h[, 1]), ], colname = 'RNAseq_logFC_6h')
df_lewis_subset <- make_deg(lewis_data[match(tf_from_dapseq[, 1], lewis_data[, 1]), ], colname = 'logFC_05h')
head(df_1h_subset)
head(df_6h_subset)
head(tf_from_dapseq)
sum_table <- cbind(df_1h_subset$X, df_6h_subset$ID, df_lewis_subset$ID, tf_from_dapseq[, 1])
sum_table <- as.data.frame(cbind(df_1h_subset$X, df_6h_subset$ID, df_lewis_subset$ID, tf_from_dapseq[, 1]))
View(sum_table)
sum_table <- cbind(df_1h_subset$X, df_6h_subset$ID, df_lewis_subset$ID, tf_from_dapseq[, 1])
View(sum_table)
sum_table <- cbind(df_1h_subset, df_6h_subset, df_lewis_subset, tf_from_dapseq[, 1])
View(sum_table)
#rnaseq_1h <- make_deg(rnaseq_1h[, c(1, 3, 7)], yname = 'RNAseq_logFC_1h')
lewis_short <- cbind(make_deg(lewis_data[, c(1,2,3)]))
head(lewis_short)
#rnaseq_1h <- make_deg(rnaseq_1h[, c(1, 3, 7)], yname = 'RNAseq_logFC_1h')
lewis_short <- cbind(make_deg(lewis_data[, c(1,2,3)], colname = 'logFC_05h'), make_deg(lewis_data[, c(1,4,5)], colname = 'logFC_1h'),
make_deg(lewis_data[, c(1,6,7)], colname = 'logFC_2h'), make_deg(lewis_data[, c(1,8,9)], colname = 'logFC_4h'),
make_deg(lewis_data[, c(1,10,11)], colname = 'logFC_8h'), make_deg(lewis_data[, c(1,12,13)], colname = 'logFC_12h'),
make_deg(lewis_data[, c(1,14,15)], colname = 'logFC_24h'))
View(lewis_short)
sum(lewis_short[, 1] == lewis_short[, 3])
sum(lewis_short[, 1] == lewis_short[, 5])
sum(lewis_short[, 1] == lewis_short[, 7])
sum(lewis_short[, 1] == lewis_short[, 9])
sum(lewis_short[, 1] == lewis_short[, 11])
sum(lewis_short[, 1] == lewis_short[, 13])
sum(lewis_short[, 1] == lewis_short[, 15])
#rnaseq_1h <- make_deg(rnaseq_1h[, c(1, 3, 7)], yname = 'RNAseq_logFC_1h')
lewis_short <- cbind(make_deg(lewis_data[, c(1,2,3)], colname = 'logFC_05h'), make_deg(lewis_data[, c(1,4,5)], colname = 'logFC_1h')[, 2],
make_deg(lewis_data[, c(1,6,7)], colname = 'logFC_2h')[, 2], make_deg(lewis_data[, c(1,8,9)], colname = 'logFC_4h')[, 2],
make_deg(lewis_data[, c(1,10,11)], colname = 'logFC_8h')[, 2], make_deg(lewis_data[, c(1,12,13)], colname = 'logFC_12h')[, 2],
make_deg(lewis_data[, c(1,14,15)], colname = 'logFC_24h')[, 2])
View(lewis_short)
sum(lewis_short != 0)
colnames(lewis_short) <- c('GeneID', 'logFC_05h', 'logFC1h', 'logFC2h', 'logFC4h', 'logFC8h', 'logFC12h', 'logFC24h')
head(lewis_data)
head(lewis_short)
lg
rnaseq_1h_sign <- make_deg(rnaseq_1h, 'RNAseq_logFC_1h')
View(rnaseq_1h_sign)
sum(rnaseq_1h_sign != 0)
sum(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
head(rnaseq_1h)
rnaseq_1h_sign <- make_deg(rnaseq_1h[, c(1, 3, 7)], 'RNAseq_logFC_1h')
sum(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
sum(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
sum(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
sum(T, F)
sum(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
isTRUE(c(T, F, F))
isTRUE(c(T, T, T))
isTRUE(T)
sum(F, T, T)
sum(rnaseq_1h_sign$RNAseq_logFC_1h != 0)
sum(rnaseq_1h_sign != 0)
sum(rnaseq_1h_sign$RNAseq_logFC_1h == 0)
sum(rnaseq_1h_sign$RNAseq_logFC_1h > 0)
sum(rnaseq_1h_sign$RNAseq_logFC_1h < 0)
head(rnaseq_6h)
rnaseq_6h_sign <- make_deg(rnaseq_6h[, c(1, 5, 7)], 'RNAseq_logFC_6h')
View(rnaseq_6h)
##select degs for functional annotation
source('~/TranscInterTF/R/make_deg.R')
rnaseq_6h_sign <- make_deg(rnaseq_6h[, c(1, 5, 7)], 'RNAseq_logFC_6h')
View(rnaseq_6h_sign)
rnaseq_6h_sign != 0
rnaseq[rnaseq_6h_sign != 0[, 2], ]
rnaseq_6h_sign[rnaseq_6h_sign != 0[, 2], ]
rnaseq_6h_sign[rnaseq_6h_sign$RNAseq_logFC_6h != 0, ]
sum(na.omit(rnaseq_1h_sign$RNAseq_logFC_1h < 0))
sum(na.omit(rnaseq_1h_sign$RNAseq_logFC_1h > 0))
sum(na.omit(rnaseq_6h_sign$RNAseq_logFC_6h > 0))
sum(na.omit(rnaseq_6h_sign$RNAseq_logFC_6h < 0))
rnaseq_1h <- read.csv('~/TranscInterTF/data/1h_RNAseq_star_deseq2.csv', header = T, stringsAsFactors = F)
rnaseq_1h <- read.csv('~/TranscInterTF/data/1h_RNAseq_star_deseq2.csv', header = T, stringsAsFactors = F)
rnaseq_6h <- read.table('~/TranscInterTF/data/6h_RNAseq.txt',header =T, stringsAsFactors = F)
lewis_data <- read.table('~/TranscInterTF/data/lewis.txt', header = T, stringsAsFactors = F)
save(rnaseq_1h, rnaseq_6h, lewis_data, file = '~/TranscInterTF/data/raw_datasets.RData')
##select degs for functional annotation
source('~/TranscInterTF/R/make_deg.R')
lewis_sign <- cbind(make_deg(lewis_data[, c(1,2,3)], colname = 'logFC_05h'), make_deg(lewis_data[, c(1,4,5)], colname = 'logFC_1h')[, 2],
make_deg(lewis_data[, c(1,6,7)], colname = 'logFC_2h')[, 2], make_deg(lewis_data[, c(1,8,9)], colname = 'logFC_4h')[, 2],
make_deg(lewis_data[, c(1,10,11)], colname = 'logFC_8h')[, 2], make_deg(lewis_data[, c(1,12,13)], colname = 'logFC_12h')[, 2],
make_deg(lewis_data[, c(1,14,15)], colname = 'logFC_24h')[, 2])
colnames(lewis_sign) <- c('GeneID', 'logFC_05h', 'logFC1h', 'logFC2h', 'logFC4h', 'logFC8h', 'logFC12h', 'logFC24h')
rnaseq_1h_sign <- make_deg(rnaseq_1h[, c(1, 3, 7)], 'RNAseq_logFC_1h')
rnaseq_6h_sign <- make_deg(rnaseq_6h[, c(1, 5, 7)], 'RNAseq_logFC_6h', lg = 0)
save(rnaseq_1h_sign, rnaseq_6h_sign, lewis_sign, file = '~/TranscInterTF/data/sign_datasets.RData')
load('~/TranscInterTF/data/sign_datasets.RData')
tf_from_dapseq <- read.table('~/TranscInterTF/data/dapseq/name_of_TF.txt', header = F, stringsAsFactors = F)
inter_1h_tf <- rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1])]
inter_1h_tf <- rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), ]
View(inter_1h_tf)
sum_table <- cbind(rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), ],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]),], tf_from_dapseq[, 1])
View(sum_table)
sum_table <- cbind(rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), ],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]),],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), ], tf_from_dapseq[, 1])
View(sum_table)
sum_table <- cbind(tf_from_dapseq[, 1], rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), ],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]),],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), ])
sum_table <- cbind(tf_from_dapseq[, 1], rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
sum_table <- cbind(tf_from_dapseq[, 1] = 'GeneID', rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
sum_table <- cbind(tf_from_dapseq[, 1], rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
intersect_table <- cbind(tf_from_dapseq[, 1], rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
rm(sum_table)
colnames(intersect_table)
colnames(intersect_table)[1:3]
colnames(rnaseq_1h_sign)
colnames(intersect_table)[1:3] <- c('GeneID', "RNAseq_logFC_1h", "RNAseq_logFC_6h")
head(intersect_table)
rm(inter_1h_tf)
is.null(inter_1h_tf)
s <- NULL
is.null(s)
rm(s)
tf_from_dapseq <- read.table('~/TranscInterTF/data/dapseq/name_of_TF.txt', header = F, stringsAsFactors = F)
load('~/TranscInterTF/data/sign_datasets.RData')
intersect_table <- cbind(tf_from_dapseq[, 1], rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
colnames(intersect_table)[1:3] <- c('GeneID', "RNAseq_logFC_1h", "RNAseq_logFC_6h")
head(intersect_table)
is.na(intersect_table) <- 0
intersect_table[is.na(intersect_table)] <- 0
View(intersect_table)
intersect_table <- cbind(tf_from_dapseq, rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
colnames(intersect_table)[1:4] <- c('GeneID', 'trivial_name', "RNAseq_logFC_1h", "RNAseq_logFC_6h")
head(intersect_table)
intersect_table[1, ]
any(intersect_table[1, ] != 0)
any(intersect_table[1, 1:2] != 0)
any(intersect_table[1, 1:2] != 0, na.rm = T)
any(intersect_table[1, 1:2] != 0, na.rm = F)
any(1 != 0)
?any
any(T, F, F)
any(F, F, F)
any(F, 1 == 0, F)
any(F, 1 == 0, T)
any(F, 1 == 0, 1 > 0)
(intersect_table[1, -1:2])
(intersect_table[1, -(1:2)])
any(intersect_table[1, -(1:2)])
(intersect_table[1, -(1:2)] == 0)
(intersect_table[1, -(1:2)] != 0)
any(F, NA)
any(F, NA, T)
any(F, NA, NA)
any(intersect_table[1, -(1:2)])
any(intersect_table[1, -(1:2)] != 0)
any(intersect_table[1, -(1:2)] != 0, na.rm = T)
any(intersect_table[6, -(1:2)] != 0, na.rm = T)
any(intersect_table[7, -(1:2)] != 0, na.rm = T)
any(intersect_table[8, -(1:2)] != 0, na.rm = T)
any(intersect_table[9, -(1:2)] != 0, na.rm = T)
# intersect_table[is.na(intersect_table)] <- 0
intersect_table$aux_sens <- any(intersect_table[, -(1:2)] != 0, na.rm = T)
any(intersect_table[, -(1:2)] != 0, na.rm = T)
any(intersect_table[1, -(1:2)] != 0, na.rm = T)
intersect_table <- cbind(tf_from_dapseq, rnaseq_1h_sign[match(tf_from_dapseq[, 1], rnaseq_1h_sign[, 1]), -1],
rnaseq_6h_sign[match(tf_from_dapseq[, 1], rnaseq_6h_sign[, 1]), -1],
lewis_sign[match(tf_from_dapseq[, 1], lewis_sign[, 1]), -1])
colnames(intersect_table)[1:4] <- c('GeneID', 'trivial_name', "RNAseq_logFC_1h", "RNAseq_logFC_6h")
head(intersect_table)
any(intersect_table[, -(1:2)] != 0, na.rm = T)
any(intersect_table[1, -(1:2)] != 0, na.rm = T)
# intersect_table[is.na(intersect_table)] <- 0
for (i in 1:nrow(intersect_table)){
print(i)
}
# intersect_table[is.na(intersect_table)] <- 0
for (i in 1:nrow(intersect_table)){
intersect_table$aux_sens[i] <- any(intersect_table[i, -(1:2)] != 0, na.rm = T)
}
3:11
1:2, 12, 3:11
c(1:2, 12, 3:11)
intersect_table <- intersect_table[, c(1:2, 12, 3:11)]
write.csv(intersect_table, file = 'whole_aux_inter_TF.csv', row.names = F, quote = F)
write.csv(intersect_table[, 1:3], file = '~/TranscInterTF/data/short_aux_inter_TF.csv', row.names = F, quote = F)
source('~/TranscInterTF/R/read_data_overlap.R')
source('~/TranscInterTF/R/read_data_overlap.R')
source('~/TranscInterTF/R/read_data_overlap.R')
all_TF <- read_data(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
all_TF <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
a <- read.table("acc_m1500p1_ZFHD_ATHB24_col_a.overlap15", stringsAsFactors = F)
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
rm(all_TF)
library(stringr)
all_TF_new <- str_split_fixed(all_TF_inter$V1, '_', 3)
all_TF$V1 <- all_TF_new[, 3]
all_TF_new <- str_split_fixed(all_TF$V1, '.', 1)
all_TF_new <- str_split_fixed(all_TF_inter$V1, '.', 1)
all_TF_inter$V1 <- gsub('.overlap15', '', all_TF_inter$V1)
head(all_TF)
head(all_TF_inter)
source('~/TranscInterTF/R/read_data_overlap.R')
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
library(stringr)
#parse our TF files to get name from filename
all_TF_new <- str_split_fixed(all_TF_inter$V1, '_', 3)
all_TF$V1 <- all_TF_new[, 3]
all_TF_inter$V1 <- all_TF_new[, 3]
all_TF_new <- str_split_fixed(all_TF_inter$V1, '.', 1)
all_TF_inter$V1 <- gsub('.overlap15', '', all_TF_inter$V1)
head(all_TF_inter)
#parse our TF files to get name from filename
all_TF_new <- str_split_fixed(all_TF_inter$V1, '_', 3)
View(all_TF_new)
View(all_TF_inter)
all_TF_inter$V1 <- all_TF_new[, 3]
all_TF_new <- str_split_fixed(all_TF_inter$V1, '.', 1)
all_TF_inter$V1 <- gsub('.overlap15', '', all_TF_inter$V1)
head(all_TF_inter)
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
rm(all_TF_new)
#parse our TF files to get name from filename
all_TF_new <- str_split_fixed(all_TF_inter$V1, '_', 3)
View(all_TF_new)
all_TF_inter$V1 <- all_TF_new[, 3]
View(all_TF_inter)
all_TF_new <- str_split_fixed(all_TF_inter$V1, '.', 1)
all_TF_inter$V1 <- gsub('.overlap15', '', all_TF_inter$V1)
rm(all_TF_new)
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
#parse our TF files to get name from filename
all_TF_new <- str_split_fixed(all_TF_inter$V1, '_', 3)
all_TF_inter$V1 <- all_TF_new[, 3]
all_TF_inter$V1 <- gsub('.overlap15', '', all_TF_inter$V1)
head(all_TF_inter)
rm(all_TF_new)
#get
gene_set <- read.table('~/TranscInterTF/data/gens_enriched.txt', header = F, stringsAsFactors = F)
View(gene_set)
#get
gene_set <- read.table('~/TranscInterTF/data/gens_enriched.txt', header = F, stringsAsFactors = F)[, 1]
'AT1G05010' %in% gene_set
all_TF_inter$V4 %in% gene_set
sum(all_TF_inter$V4 %in% gene_set)
head(all_TF_inter)
gene_set[1]
all_TF_inter[grep(gene_set[1], all_TF_inter$V4), ]
all_TF_inter[grep(gene_set[2], all_TF_inter$V4), ]
all_TF_inter[grep(gene_set[2], all_TF_inter$V4), 4]
all_TF_inter[all_TF_inter$V4 == "AT1G70560", ]
all_TF_inter[grep(gene_set[2], all_TF_inter$V4), 2]
all_TF_inter[grep(gene_set[2], all_TF_inter$V4), 1]
all_TF_inter[all_TF_inter$V4 == "AT1G70560", ]
length(all_TF_inter[grep(gene_set[2], all_TF_inter$V4), 1])
length(all_TF_inter[all_TF_inter$V4 == gene_set[2], 1])
nrow(all_TF_inter)
nrow(intersect_table)
head(intersect_table)
sum(intersect_table$trivial_name %in% all_TF_inter$V1)
intersect_table[intersect_table$trivial_name == gene_set[2]]
intersect_table[intersect_table$trivial_name == gene_set[2], ]
intersect_table[intersect_table$trivial_name[1] %in% all_TF_inter$V2, ]
intersect_table$trivial_name[1] %in% all_TF_inter$V2
intersect_table$trivial_name[1] %in% all_TF_inter$V1
grep(intersect_table$trivial_name[1], all_TF_inter$V1)
intersect_table$trivial_name[1]
View(all_TF_inter)
intersect_table[grep(intersect_table$trivial_name[1], all_TF_inter$V1), ]
all_TF_inter[grep(intersect_table$trivial_name[1], all_TF_inter$V1), ]
all_TF_inter[grep(intersect_table$trivial_name[1], all_TF_inter$V1), 4]
all_TF_inter[match(intersect_table$trivial_name[1], all_TF_inter$V1), 4]
all_TF_inter[match(intersect_table$trivial_name, all_TF_inter$V1), 4]
trivial_name[2]
intersect_table$trivial_name[2]
all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4]
all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4]
?grep
all_TF_inter[regexpr(intersect_table$trivial_name[2], all_TF_inter$V1), 4]
intersect_table$intersection <-
all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4]
# intersect_table$intersection <-
all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4]
# intersect_table$intersection <-
a <- all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4]
# intersect_table$intersection <-
a <- paste(all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4], sep = '/')
# intersect_table$intersection <-
a <- paste(all_TF_inter[grep(intersect_table$trivial_name[2], all_TF_inter$V1), 4], collapse = '/')
a
a
for (tf in intersect_table$trivial_name) {
print(tf)
}
for (i in nrow(intersect_table$trivial_name)) {
print(i)
}
for (i in nrow(intersect_table)) {
print(i)
}
for (i in 1:nrow(intersect_table)) {
print(i)
}
class(i)
all_TF_inter$V1
for (i in 1:nrow(intersect_table)) {
intersect_table$intersection[i] <- paste(all_TF_inter[grep(intersect_table[i, 2], all_TF_inter$V1), 4], collapse = '/')
}
View(intersect_table)
rm(a)
colnames(intersect_table)
c(1:3, 13, 4:12)
##возможно это можно сделать без цикла, использовав функцию match()
intersect_table <- intersect_table[, c(1:3, 13, 4:12)]
View(all_TF_inter)
write.csv(intersect_table, file = '~/TranscInterTF/data/whole_aux_inter_TF.csv', row.names = F, quote = F)
write.csv(intersect_table[, 1:4], file = '~/TranscInterTF/data/short_aux_inter_TF.csv', row.names = F, quote = F)
View(read_data_overlap)
461 - 7
file_prefix <- 'degs_m1500p1_'
paste0('~/TranscInterTF/data/dapseq/', file_prefix)
paste0('~/TranscInterTF/data/dapseq/', file_prefix, '.bed')
file_prefix <- 'degs_m1500p1'
paste0('~/TranscInterTF/data/dapseq/', file_prefix, '.bed')
paste0('~/TranscInterTF/data/dapseq/', file_prefix, '_all.bed')
write.table('call ajo_chr_n_ds_2.bat aux_m1500p1', file = run.bat)
write.table('call ajo_chr_n_ds_2.bat aux_m1500p1', file = 'run.bat')
write('call ajo_chr_n_ds_2.bat aux_m1500p1', file = 'run.bat')
write(paste0('call ajo_chr_n_ds_2.bat', file_prefix), file = paste0(path, 'run.bat'))
path <- "~/TranscInterTF/data/dapseq/"
write(paste0('call ajo_chr_n_ds_2.bat', file_prefix), file = paste0(path, 'run.bat'))
write(paste('call ajo_chr_n_ds_2.bat', file_prefix, sep = ' '), file = paste0(path, 'run.bat'))
#get common table for overlapping TF vs whole 132 (130) genes
source('~/TranscInterTF/R/read_data_overlap.R')
all_TF_inter <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/whole_chr')
all_TF_inter <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/whole_chr')
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
setwd('~/R_projects')
View(read_data_overlap)
read.table('empty.txt', stringsAsFactors = F)
?tryCatch
#get common table for overlapping TF vs whole 132 (130) genes
source('~/TranscInterTF/R/read_data_overlap.R')
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
all_TF_inter <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/whole_chr')
if (!inherits(tmp, 'try-error')) tmp
try(read.table('empty.txt', stringsAsFactors = F))
setwd('~/R_projects')
try(read.table('empty.txt', stringsAsFactors = F))
tmp <- try(read.table('empty.txt', stringsAsFactors = F))
if (!inherits(tmp, 'try-error')) tmp
info = file.info('empty.txt')
empty = rownames(info[info$size == 0, ])
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
temp_df  <- tryCatch(read.table(i, stringsAsFactors = F), error=function(e) NULL)
if (!inherits(temp_df, 'try-error')) temp_df
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
temp_df  <- try(read.table(i, stringsAsFactors = F))
if (!inherits(temp_df, 'try-error')) temp_df
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
all_TF_inter <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/whole_chr')
setwd('~/R_projects')
fileSize('empty.txt', units = "B")
?file.size
file.size('empty.txt', units = "B")
file.size('empty.txt', units = "B")[1, ]
file.size('empty.txt', units = "B")
a <- file.size('empty.txt', units = "B")
a <- file.size('empty.txt', units = "B")[1]
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
print(file.size(i, units = 'B'))
temp_df  <- (read.table(i, stringsAsFactors = F))
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
print(file.size(i, units = 'B'))[1]
temp_df  <- (read.table(i, stringsAsFactors = F))
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
print(file.size(i, units = 'B'))[1]
temp_df  <- (read.table(i, stringsAsFactors = F))
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
if ((file.size(i, units = 'B'))[1] == 0) { next
cat(n)
}
temp_df  <- (read.table(i, stringsAsFactors = F))
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
# all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
all_TF_inter <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/whole_chr')
read_data_overlap  <- function(working_dir){
old_dir <- getwd()
setwd(working_dir)
df  <- data.frame()
number  <- 0
for (i in dir(path = working_dir, pattern = "*.overlap15")){
if ((file.size(i, units = 'B'))[1] <= 1) { next
cat(n)
}
temp_df  <- (read.table(i, stringsAsFactors = F))
temp_df$V1 <- i
df  <- rbind(df, temp_df)
number <- number + 1
}
print(paste(as.character(number), "files were combined"))
setwd(old_dir)
return(df)
}
# all_TF_inter <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
all_TF_inter <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/whole_chr')
all_TF_old <- read_data_overlap(working_dir = '~/R_projects/rnaseq_chipseq/count_IAA_degs/ethylene_overlap/whole_chr')
sum(all_TF_inter == all_TF_old)
12821 * 4
12821 * 3
View(all_TF_inter)
View(all_TF_old)
sum(all_TF_inter[, -1] == all_TF_old[, -1])
