log2(18170000)
log2(181700)
sub_genes[2, 3]
sub_genes[2, 3] <- log2(18.17/0.0001)
sub_genes[2, 3]
sub_genes[16, 3]
sub_genes[16, 3] <- 0
pheatmap(sub_genes)
sub_genes
library(gplots)
heatmap.2(sub_genes)
rownames(sub_genes) <- genes$trivial
sub_genes
genes
genes$ID == sub_genes$GeneID
sub_genes$GeneID <- NULL
sub_genes
heatmap.2(sub_genes)
View(sub_genes)
sub_genes <- as.matrix(sub_genes)
my_palette <- colorRampPalette(c("green", 'black', "red"))(n = 299)
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
my_palette <- colorRampPalette(c("green2", 'black', "red"))(n = 299)
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
my_palette <- colorRampPalette(c("green2", 'black', "red4"))(n = 299)
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
my_palette <- colorRampPalette(c("green", 'black', "red"))(n = 299)
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
sub_genes <- whole_table[match(genes$ID, whole_table$GeneID), ]
sub_genes[2, 3] <- log2(18.17/0.01)
sub_genes[16, 3] <- 0
rownames(sub_genes) <- genes$trivial
sub_genes$GeneID <- NULL
sub_genes <- as.matrix(sub_genes)
my_palette <- colorRampPalette(c("green", 'black', "red"))(n = 299)
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
sub_genes[2, 3]
View(sub_genes)
load('~/TranscInterTF/data/sign_datasets.RData')
tf_list <- read.table('~/TranscInterTF/data/heatmap_tf.txt', header = F, stringsAsFactors = F)
tf_list <- read.table('~/TranscInterTF/data/heatmap_tf.txt', header = T, stringsAsFactors = F)
tf_genes <- rnaseq_1h_sign[match(tf_list$ID, rnaseq_1h_sign$GeneID), ]
tf_genes
tf_genes$RNAseq_logFC_6h <- rnaseq_6h_sign[match(tf_list$ID, rnaseq_6h_sign$GeneID), ]
tf_genes
tf_genes <- rnaseq_1h_sign[match(tf_list$ID, rnaseq_1h_sign$GeneID), ]
tf_genes$RNAseq_logFC_6h <- rnaseq_6h_sign[match(tf_list$ID, rnaseq_6h_sign$GeneID), 2]
tf_genes
View(rnaseq_6h_sign)
tf_genes[, 4:11]
tf_genes[, 4:11] <- character(0)
tf_genes[, 4:11] <- lewis_sign[match(tf_list$ID, lewis_sign$GeneID), 2:8]
tf_genes
tf_genes <- rnaseq_1h_sign[match(tf_list$ID, rnaseq_1h_sign$GeneID), ]
tf_genes$RNAseq_logFC_6h <- rnaseq_6h_sign[match(tf_list$ID, rnaseq_6h_sign$GeneID), 2]
tf_genes[, 4:10] <- lewis_sign[match(tf_list$ID, lewis_sign$GeneID), 2:8]
tf_genes
rownames(tf_genes) <- tf_list$trivial
View(tf_list)
##only unique tf we should use
unique(tf_list$trivial)
##only unique tf we should use
unique(tf_list)
##only unique tf we should use
duplicated(tf_list$trivial)
##only unique tf we should use
tf_list[!=duplicated(tf_list$trivial), ]
!= FALSE
== FALSE
##only unique tf we should use
tf_list[duplicated(tf_list$trivial), ]
##only unique tf we should use
tf_list[-duplicated(tf_list$trivial), ]
duplicated(tf_list$trivial)
##only unique tf we should use
tf_list[!duplicated(tf_list$trivial), ]
##only unique tf we should use
tf_list <- tf_list[!duplicated(tf_list$trivial), ]
tf_list
tf_genes <- rnaseq_1h_sign[match(tf_list$ID, rnaseq_1h_sign$GeneID), ]
tf_genes$RNAseq_logFC_6h <- rnaseq_6h_sign[match(tf_list$ID, rnaseq_6h_sign$GeneID), 2]
tf_genes[, 4:10] <- lewis_sign[match(tf_list$ID, lewis_sign$GeneID), 2:8]
rownames(tf_genes) <- tf_list$trivial
tf_genes[, 1]
tf_genes$GeneID == tf_list$ID
rownames(tf_genes) == tf_list$trivial
View(tf_genes)
write.csv(tf_genes, file = '~/TranscInterTF/data/TF_folds.csv', row.names = T, quote = F)
tf_genes$GeneID <- NULL
tf_genes <- as.matrix(tf_genes)
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
heatmap.2(sub_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
heatmap.2(tf_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
tf_genes
is.na(tf_genes)
is.na(tf_genes) <- 0
heatmap.2(tf_genes, Rowv = F, Colv = F, trace='none', col=my_palette, scale="none", distfun = dist, na.rm = T, sepwidth=c(0.05,0.05),
notecex=1.0, notecol="cyan", na.color=par("bg"), density.info = 'histogram', dendrogram = 'none')
tf_genes
tf_genes[is.na(tf_genes)]
tf_genes[is.na(tf_genes), ]
tf_list
all_peaks <- read.table('~/TranscInterTF/data/dapseq/all_m1500p1.bed', header = F, stringsAsFactors = F)
gene_set <- read.table('~/TranscInterTF/data/dapseq/TF_vas.txt', header = F, stringsAsFactors = F)[ ,1]
gene_set <- read.table('~/TranscInterTF/data/dapseq/TF_vas.txt', header = F, stringsAsFactors = F)[ ,1]
my_peaks <- all_peaks[match(gene_set, all_peaks$V5), ]
my_peaks
View(all_peaks)
all_peaks[1, 2]
all_peaks[1, 2] - all_peaks[1, 3]
write.table(my_peaks, file = '~/TranscInterTF/data/dapseq/vas_m1500p1_all.bed', sep = '\t', quote = F, col.names = F, row.names = F)
sep_files <- function(df, path, pref, chr) {
chr_sub <- my_peaks[my_peaks$V1 == chr, ]
write.table(chr_sub, file = paste0(path, pref, chr, '.bed'), sep = '\t', quote = F, col.names = F, row.names = F)
return(nrow(chr_sub))
}
path <- "~/TranscInterTF/data/dapseq/"
prefix <- 'vas_m1500p1_'
sep_files(my_peaks, path, prefix, 'chr1')
sep_files(my_peaks, path, prefix, 'chr2')
sep_files(my_peaks, path, prefix, 'chr3')
sep_files(my_peaks, path, prefix, 'chr4')
sep_files(my_peaks, path, prefix, 'chr5')
my_tf <- read.table('~/R_projects/dapseq_new/all_TF_568.txt', header = F, stringsAsFactors = F)[, 1]
my_tf
source('~/TranscInterTF/R/read_data_overlap.R')
all_TF <- read_data(working_dir = '~~/TranscInterTF/data/dapseq/dapseq_pos/vas')
all_TF <- read_data_overlap(working_dir = '~~/TranscInterTF/data/dapseq/dapseq_pos/vas')
all_TF <- read_data_overlap(working_dir = '~/TranscInterTF/data/dapseq/dapseq_pos/vas')
View(all_TF)
my_gens <- (read.table('~/R_projects/rnaseq_chipseq/YUC/yuc.txt', header = F, stringsAsFactors = F))[, 1]
my_gens
View(all_TF)
library(stringr)
write.csv(all_TF, '~/TranscInterTF/data/dapseq/TF_coords_for_vasilina.csv', quote = F, row.names = F)
write.csv(all_TF, '~/TranscInterTF/data/dapseq/TF_coords_for_vasilina.csv', quote = F, row.names = F, col.names = F)
library(stringr)
TF_name <- str_split_fixed(all_TF$TF, '_', 3)
colnames(all_TF)[1] <- 'TF'
write.csv(all_TF, '~/TranscInterTF/data/dapseq/TF_coords_for_vasilina.csv', quote = F, row.names = F)
TF_name <- str_split_fixed(all_TF$TF, '_', 3)
all_TF$TF <- TF_name[, 3]
head(all_TF)
all_TF$TF <- gsub('.overlap15', '', all_TF$TF)
#my_gens <- (read.table('~/R_projects/rnaseq_chipseq/YUC/yuc.txt', header = F, stringsAsFactors = F))[, 1]
#files was separated previously, overlap15 files is in directory
#
my_tf <- read.table('~/R_projects/dapseq_new/all_TF_568.txt', header = F, stringsAsFactors = F)
my_tf <- read.table('~/R_projects/dapseq_new/all_TF_568_triv.txt', header = F, stringsAsFactors = F)[, 2]
gens_tf <- data.frame(matrix(ncol = length(my_gens), nrow = length(my_tf)))
my_gens <- (read.table('~/TranscInterTF/data/dapseq/TF_vas.txt', header = F, stringsAsFactors = F))[, 1]
my_gens
gens_tf <- data.frame(matrix(ncol = length(my_gens), nrow = length(my_tf)))
row.names(gens_tf) <- my_tf
colnames(gens_tf) <- my_gens
head(gens_tf)
i <- 1
j <- 1
while (i <= nrow(gens_tf)) {
j <- 1
while (j <= ncol(gens_tf)) {
tf_subset <- all_TF[all_TF$TF == rownames(gens_tf)[i], 4]
if (colnames(gens_tf)[j] %in% tf_subset) {
gens_tf[i, j] <- 'yes'
}
else {
gens_tf[i, j] <- ""
}
j <- j+1
}
i <- i+1
}
View(gens_tf)
write.csv(gens_tf, '/TranscInterTF/data/dapseq/TF_intersect_Vasilina.csv', quote = F)
write.csv(gens_tf, '~/TranscInterTF/data/dapseq/TF_intersect_Vasilina.csv', quote = F)
View(my_peaks)
peak_for <- my_peaks[my_peaks$V4 == '+', ]
peak_rev <- my_peaks[my_peaks$V4 == '-', ]
head(all_TF)
intersect_for <- function(bed, all_TF) {
df <- data.frame()
for (gene in bed[, 5]) {
sub_TF <- all_TF[all_TF[, 4] == gene, ]
sub_TF$gene <- gene
sub_TF$begin <- sub_TF[, 2] - bed[bed[, 5] == gene, 3]
sub_TF$end <- sub_TF[, 3] - bed[bed[, 5] == gene, 3]
df <- rbind(df, sub_TF)
}
return(df)
}
tf_for <- intersect_for(peak_for, all_TF)
intersect_rev <- function(bed, all_TF) {
df <- data.frame()
for (gene in bed[, 5]) {
sub_TF <- all_TF[all_TF[, 4] == gene, ]
sub_TF$gene <- gene
sub_TF$begin <- -(sub_TF[, 3] - bed[bed[, 5] == gene, 2])
sub_TF$end <-  -(sub_TF[, 2] - bed[bed[, 5] == gene, 2])
df <- rbind(df, sub_TF)
}
return(df)
}
tf_rev <- intersect_rev(peak_rev, all_TF)
tf_raw <- rbind(tf_for, tf_rev)
View(tf_raw)
View(tf_rev)
View(all_TF)
peak_for
peak_rev
all_TF[all_TF[, 4] == AT2G46270, ]
all_TF[all_TF[, 4] == 'AT2G46270', ]
intersect_for <- function(bed, all_TF) {
df <- data.frame()
for (gene in bed[, 5]) {
sub_TF <- all_TF[all_TF[, 4] == gene, ]
sub_TF$gene <- gene
sub_TF$begin <- sub_TF[, 2] - bed[bed[, 5] == gene, 3]
sub_TF$end <- sub_TF[, 3] - bed[bed[, 5] == gene, 3]
df <- rbind(df, sub_TF)
}
return(df)
}
tf_for <- intersect_for(peak_for, all_TF)
View(tf_for)
View(tf_raw)
write.csv(tf_raw, '~/TranscInterTF/data/dapseq/tf_raw_Vas.csv', row.names = F, quote = F)
levels(tf_rev$gene)
class(tf_rev$gene)
levels(as.factor(tf_rev$gene))
levels(as.factor(tf_for$gene))
levels(as.factor(tf_for$TF))
levels(as.factor(tf_rev$TF))
tf_raw <- tf_raw[, c(1, 5:7)]
View(all_TF)
View(gens_tf)
gens_tf$AT2G46270 == 'yes'
sum(gens_tf$AT2G46270 == 'yes')
tf_raw$gene == 'AT3G62420'
sum(tf_raw$gene == 'AT3G62420')
levels(as.factor(tf_rev$TF))
levels(as.factor(tf_rev$gene))
sum(tf_raw$gene == 'AT5G17300')
sum(gens_tf$AT5G17300 == 'yes')
sum(gens_tf$AT3G62420 == 'yes')
View(gens_tf)
View(all_peaks)
View(all_TF)
length(all_TF$TF)
length(levels(all_TF$TF))
length(levels(as.factor(all_TF$TF)))
tf_subset <- all_TF[all_TF$TF == rownames(gens_tf)[1], 4]
rownames(gens_tf)[1]
all_TF$TF == rownames(gens_tf)[1]
all_TF[all_TF$TF == rownames(gens_tf)[1], ]
all_TF[all_TF$TF == rownames(gens_tf)[1], 4]
olnames(gens_tf)[1]
colnames(gens_tf)[1]
all_TF[all_TF$TF == rownames(gens_tf)[2], 4]
all_TF[all_TF$TF == rownames(gens_tf)[3], 4]
all_TF[all_TF$TF == rownames(gens_tf)[4], 4]
all_TF[all_TF$TF == rownames(gens_tf)[5], 4]
write.csv(tf_raw, '~/TranscInterTF/data/dapseq/TF_coords_Vasilina.csv', row.names = F, quote = F)
sum(rownames(gens_tf) == my_tf)
my_tf <- read.table('~/R_projects/dapseq_new/all_TF_568_triv.txt', header = F, stringsAsFactors = F)
gens_tf <- data.frame(matrix(ncol = length(my_gens), nrow = length(my_tf[, 2])))
row.names(gens_tf) <- my_tf[, 2]
colnames(gens_tf) <- my_gens
i <- 1
j <- 1
while (i <= nrow(gens_tf)) {
j <- 1
while (j <= ncol(gens_tf)) {
tf_subset <- all_TF[all_TF$TF == rownames(gens_tf)[i], 4]
if (colnames(gens_tf)[j] %in% tf_subset) {
gens_tf[i, j] <- 'yes'
}
else {
gens_tf[i, j] <- ""
}
j <- j+1
}
i <- i+1
}
sum(rownames(gens_tf) == my_tf)
rownames(gens_tf) == my_tf
sum(rownames(gens_tf) == my_tf[,1])
sum(rownames(gens_tf) == my_tf[,2])
head(my_tf)
gens_tf$gene_id <- my_tf[, 1]
sum(rownames(gens_tf == my_tf$V2))
sum(rownames(gens_tf) == my_tf$V2)
sum((gens_tf$gene_id) == my_tf$V1)
gens_tf <- gens_tf[, c(6, 1:5)]
write.csv(gens_tf, '~/TranscInterTF/data/dapseq/TF_intersect_Vasilina.csv', quote = F)
tf_inters <- read.csv('~R_projects/rnaseq_chipseq/count_IAA_degs/aux_over/tf_intersect_upd.csv', stringsAsFactors = F)
tf_inter <- read.csv('~/R_projects/rnaseq_chipseq/count_IAA_degs/aux_over/tf_intersect_upd.csv', stringsAsFactors = F)
View(tf_inter)
tf_inter$AT1G73590
rownames(tf_inter) == 'AT5G17300'
sum(rownames(tf_inter) == 'AT5G17300')
tf_inter <- rbind(colnames(tf_inter), tf_inter)
pin <- c('AT1G73590', 'AT5G57090', 'AT1G70940', 'AT2G01420', 'AT1G23080')
tf_inter$pin[1]
pin[1]
tf_inter$AT1G73590
tf_subset <- tf_inter[tf_inter$AT1G73590, ]
View(tf_subset)
my_gens <- (read.table('~/TranscInterTF/data/dapseq/TF_vas.txt', header = F, stringsAsFactors = F))[, 1]
my_gens
my_tf <- read.table('~/R_projects/dapseq_new/all_TF_568_triv.txt', header = F, stringsAsFactors = F)
View(my_tf)
'AT5G17300' %in% my_tf$V1
match(pin, my_tf)
match(pin, my_tf$V1)
match(pin, my_tf$V1)
match(pin, my_tf[, 1])
pin
grep(pin[1], my_tf[, 1])
grep(pin[1], my_tf$V1)
View(my_tf)
'AT5G17300' %in% my_tf$V1
match(my_gens, my_tf[, 1])
my_tf[match(my_gens, my_tf[, 1]), ]
tf <- my_tf[match(my_gens, my_tf[, 1]), ]
match(tf[, 2], tf_inter$X)
tf_inter[match(tf[, 2], tf_inter$X), ]
pin
tf_subset <- NULL
del(tf_subset)
rm(tf_subset)
match(pin, rownames(tf_inter))
match(pin, rownames(tf_inter[1, ]))
match(pin, (tf_inter[1, ]))
tf_inter[, match(pin, (tf_inter[1, ]))]
cut_tf <- tf_inter[, match(pin, (tf_inter[1, ]))]
tf_inter[match(tf[, 2], tf_inter$X), ]
View(cut_tf)
rownames(cut_tf) <- rownames(tf_inter)
cut_tf <- cbind(tf_inter[, c(1, match(pin, (tf_inter[1, ])))])
cut_tf[match(tf[, 2], cut_tf$X), ]
tf_finally <- cut_tf[match(tf[, 2], cut_tf$X), ]
tf_finally
tf_coords <- read.csv('~/R_projects/rnaseq_chipseq/YUC/raw_tf.csv', stringsAsFactors = F)
View(tf_coords)
pin
coords_cut <- tf_coords[match(pin, tf_coords$gene), ]
coords_cut
my_gens
View(my_tf)
coords_cut <- tf_coords$TF == 'MYBrelated_RVE1_col_a'
coords_cut <- tf_coords[tf_coords$TF == 'MYBrelated_RVE1_col_a', ]
coords_cut
View(coords_cut)
levels(as.factor(coords_cut$TF))
View(tf_finally)
for (tf in tf_finally$X) {
coords_cut <- rbind(coords_cut, tf_coords[tf_coords$TF == tf, ])
}
rm(coords_cut)
for (tf in tf_finally$X) {
coords_cut <- rbind(coords_cut, tf_coords[tf_coords$TF == tf, ])
}
coords_cut <- data.frame()
for (tf in tf_finally$X) {
coords_cut <- rbind(coords_cut, tf_coords[tf_coords$TF == tf, ])
}
View(coords_cut)
levels(as.factor(coords_cut$gene))
for(p in pin) {
coords_final <- rbind(coords_final, coords_cut[coords_cut$gene == p, ])
}
coords_final <- data.frame()
for(p in pin) {
coords_final <- rbind(coords_final, coords_cut[coords_cut$gene == p, ])
}
View(coords_final)
levels(as.factor(coords_final$gene))
pin
tf_finally
write.csv(coords_final, '~/TranscInterTF/data/dapseq/PIN_coords.csv', row.names = F, quote = F)
write.csv(tf_finally, '~/TranscInterTF/data/dapseq/PIN_intersect.csv', row.names = F, quote = F)
head(coords_final)
write.csv(coords_final[, 5:8], '~/TranscInterTF/data/dapseq/PIN_coords.csv', row.names = F, quote = F)
tf_finally <- rbind(pin, tf_finally)
tf_finally <- cut_tf[match(tf[, 2], cut_tf$X), ]
cut_tf <- cbind(tf_inter[, c(1, match(pin, (tf_inter[1, ])))])
tf_finally <- cut_tf[match(tf[, 2], cut_tf$X), ]
tf <- my_tf[match(my_gens, my_tf[, 1]), ]
tf_finally <- cut_tf[match(tf[, 2], cut_tf$X), ]
while while (condition) {
}
while (T) {
print(1)
}
df <- read.csv('/folder_for_ML/griby_traint.txt')
df <- read.csv('/folder_for_ML/griby_train.txt')
df <- read.csv('~/folder_for_ML/griby_train.txt')
View(df)
grep('?', df)
grep('?', df$class)
grep('?', df$stalk_root)
df$stalk_root == '?'
df[df$stalk_root == '?', ]
nrow(df[df[, 1] == '?', ])
nrow(df[df[, 2] == '?', ])
nrow(df[df[, 3] == '?', ])
nrow(df[df[, 4] == '?', ])
nrow(df[df[, 5] == '?', ])
nrow(df[df[, 6] == '?', ])
colnames(df)
class(df$class)
class(df$cap_shape)
levels(df$bruises)
levels(df$odor)
levels(df$gill_attachment)
version()
version
gsub('?', NA, df)
df <- gsub('?', NA, df[,])
df <- read.csv('~/folder_for_ML/griby_train.txt')
df <- gsub('?', NA, df[, 1:23])
df <- read.csv('~/folder_for_ML/griby_train.txt')
df <- gsub('?', NA, df[, 1:23])
df <- read.csv('~/folder_for_ML/griby_train.txt')
df <- gsub('?', NA, df)
grep('?', df)
df <- read.csv('~/folder_for_ML/griby_train.txt')
grep('?', df)
summary(df)
df_sum <- summary(df)
df_sum <- as.data.frame(summary(df))
df_sum
View(df_sum)
(summary(df)
)
q()
setwd('~/TranscInterTF/data/araport/')
aco1 <- read.table('~/TranscInterTF/data/araport/aco1.txt', stringsAsFactors = F, header = T)
if (nrow(aco1) != nrow(unique(aco1))) {
aco1 <- aco1[!duplicated(aco1[, 1]), ]
}
aco1 <- aco1[order(aco1$gene_id), ]
files <- dir(pattern = '*.csv')
##check that your files have AGI codes
files <- files[grep('AT[1-5]G*', files)]
level_heatmap <- c('light-grown seedling', 'dark-grown seedling', 'leaf', 'root',
'shoot apical meristem', 'root apical meristem')
##choose tissue to mean counts and for heatmap
mean_data <- function(file_name, level) {
df <- read.csv(file_name)
gene_mean <- unlist(strsplit(file_name, '_'))[1]
i <- 2
for (tissue in level) {
#a <- mean(df[df$experiment_tissue == tissue])
gene_mean[i] <- mean(df[df$experiment_tissue == tissue, 2])
i <- i+1
}
return(gene_mean)
}
aco1_file <- vector()
i <- 1
for (gene in aco1$gene_id) {
aco1_file <- c(aco1_file, files[grep(aco1$gene_id[i], files)])
i <- i+1
}
#choose only target files for aco1
#this not beutiful, but creating dataset
temp_df <- mean_data(aco1_file[1], level_heatmap)
i <- 2
while (i <= length(aco1_file)) {
temp_df <- rbind(temp_df, mean_data(aco1_file[i], level_heatmap))
i <- i+1
}
genes_heat <- as.data.frame(temp_df, row.names = temp_df[, 1])
colnames(genes_heat) <- c('gene_id', level_heatmap)
View(genes_heat)
(rownames(genes_heat) == aco1[, 1])
rownames(genes_heat) <- aco1[, 2]
genes_heat <- genes_heat[order(rownames(genes_heat)), ]
library(pheatmap)
genes_heat <- genes_heat[, -1]
class(genes_heat[, 6])
#genes_heat <- as.matrix(genes_heat)
genes_heat[, 1] <- as.numeric(genes_heat[, 1])
genes_heat[, 2] <- as.numeric(genes_heat[, 2])
genes_heat[, 3] <- as.numeric(genes_heat[, 3])
genes_heat[, 4] <- as.numeric(genes_heat[, 4])
genes_heat[, 5] <- as.numeric(genes_heat[, 5])
genes_heat[, 6] <- as.numeric(genes_heat[, 6])
my_palette <- colorRampPalette(c("white", "red"))(n = 299)
my_array <- as.matrix(genes_heat)
pheatmap(my_array, color = my_palette, cluster_rows = F, cluster_cols = F)
summary(genes_heat)
summary(temp_df)
class(temp_df)
class(as.data.frame(temp_df))
class(as.data.frame(temp_df)[, 1])
class(as.numeric(as.data.frame(temp_df)[, 1]))
(as.numeric(as.data.frame(temp_df)[, 1]))
(as.numeric(as.data.frame(temp_df)[, 2]))
(as.numeric(as.data.frame(temp_df)[, 3]))
(as.numeric(as.data.frame(temp_df)[, 3]))
(as.numeric(as.data.frame(temp_df)[, 5]))
(as.numeric(as.data.frame(temp_df)[, 7]))
